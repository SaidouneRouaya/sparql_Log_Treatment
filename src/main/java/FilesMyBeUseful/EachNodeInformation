package MDPatternDetection;

import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.Statement;

import java.util.ArrayList;

public class EachNodeSInformation {


    private Resource subject;
    private int numberAsSubject;
    private int numberAsObject;
    private ArrayList<Statement> listAsSubject = new ArrayList<>();
    private ArrayList<Statement> listAsObject = new ArrayList<>();

    public EachNodeSInformation(Resource subject, int numberAsSubject, int numberAsObject, Statement statementAsSubject, Statement statementAsObject) {
        this.subject = subject;
        this.numberAsSubject = numberAsSubject;
        this.numberAsObject = numberAsObject;
        if (statementAsSubject != null) this.listAsSubject.add(statementAsSubject);
        if (statementAsObject != null) this.listAsObject.add(statementAsObject);
    }

    public EachNodeSInformation(Resource subject, int numberAsSubject, int numberAsObject) {
        this.subject = subject;
        this.numberAsSubject = numberAsSubject;
        this.numberAsObject = numberAsObject;
    }

    public Resource getSubject() {
        return subject;
    }

    public void setSubject(Resource subject) {
        this.subject = subject;
    }

    public int getNumberAsSubject() {
        return numberAsSubject;
    }

    public void setNumberAsSubject(int numberAsSubject) {
        this.numberAsSubject = numberAsSubject;
    }

    public int getNumberAsObject() {
        return numberAsObject;
    }

    public void setNumberAsObject(int numberAsObject) {
        this.numberAsObject = numberAsObject;
    }

    public ArrayList<Statement> getListAsSubject() {
        return listAsSubject;
    }

    public void setListAsSubject(ArrayList<Statement> listAsSubject) {
        this.listAsSubject = listAsSubject;
    }

    public ArrayList<Statement> getListAsObject() {
        return listAsObject;
    }

    public void setListAsObject(ArrayList<Statement> listAsObject) {
        this.listAsObject = listAsObject;
    }

    public void setNumberAsSubject() {
        this.numberAsSubject++;
    }

    public void setNumberAsObject() {
        this.numberAsObject++;
    }

    @Override
    public boolean equals(Object obj) {

        if (obj instanceof Resource) {
            return subject.equals(obj);
        } else return false;

    }

    public void removeAsSubject(Statement st) {
        listAsSubject.remove(st);

    }

    public void removeAsObject(Statement st) {
        listAsObject.remove(st);
    }
}




/** Loop to feed this structure */

HashMap<String, EachNodeSInformation> listInfoNodes = new HashMap<>();


            // For every model in results
            for (Model m : results) {
                Iterator<Statement> list = m.listStatements();
                // For every Statement (triple) in model
                while (list.hasNext()) {

                    statement = list.next();
                    String subject = statement.getSubject().toString();

                    // if the subject is not in listInfoNodes as a subject
                    if (!listInfoNodes.containsKey(subject)) {
                        // if it doesn't exist , create a new instance with numberAsSubject = 1
                        listInfoNodes.put(subject, new EachNodeSInformation(statement.getSubject(), 1, 0, statement, null));

                    } else {// if the subject exists in listInfoNodes

                        // increment number of subjects and add the statement too the list
                        listInfoNodes.get(subject).setNumberAsSubject();
                        listInfoNodes.get(subject).getListAsSubject().add(statement);


                        // test if the object doesn't exists in listInfoNodes
                        String object = statement.getObject().toString();
                        if (!listInfoNodes.containsKey(object)) {
                            // if yes, add a new instance where the object is a subject with numberAsObject = 1
                            listInfoNodes.put(object, new EachNodeSInformation(statement.getObject().asResource(), 0, 1, null, statement));
                        } else { // if the object exists in listInfoNodes
                            // increment number of object and add the statement too the list
                            listInfoNodes.get(object).setNumberAsObject();
                            listInfoNodes.get(object).getListAsObject().add(statement);

                        }

                    }

                }
            }

/** Affichage */
  public static void afficherListInformations(HashMap<String, EachNodeSInformation> listInfoNodes) {

        Iterator it = listInfoNodes.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, EachNodeSInformation> pair = (Map.Entry) it.next();

            System.out.println(pair.getKey() + " : \n -------------- List as Subject --------------");

            for (Statement st : pair.getValue().getListAsSubject()) {
                System.out.println(st.toString() + "\n");
            }

            System.out.println("\n --------------------------------- List as Object --------------");

            for (Statement st : pair.getValue().getListAsObject()) {
                System.out.println(st.toString() + "\n");
            }
            System.out.println("\n###########################################################################\n\n\n");

            it.remove(); // avoids a ConcurrentModificationException
        }
    }

    public static void afficherListInformations2(HashMap<String, EachNodeSInformation> listInfoNodes) {

        Iterator it = listInfoNodes.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, EachNodeSInformation> pair = (Map.Entry) it.next();

            System.out.println(pair.getKey() + " : \n -------------- Number as Subject : \t " + pair.getValue().getNumberAsSubject());

            System.out.println("\t -------------- Number as Object : " + pair.getValue().getNumberAsObject() + "\n");

            System.out.println("\n______________________________________________________________________\n\n\n");

            it.remove(); // avoids a ConcurrentModificationException
        }
    }






